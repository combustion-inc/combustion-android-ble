plugins {
    id("com.android.library")
    id("kotlin-android")
    id("maven-publish")
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=4', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "0.0.3"

        var versionName = getVersionName()
        buildConfigField 'String', 'VERSION_NAME', "\"" + versionName + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    // see: https://developer.android.com/studio/write/lint
    lint {
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        // If set to true (default), stops the build if errors are found.
        abortOnError true
        // If true, only report errors.
        ignoreWarnings false
        // If true, lint also checks all dependencies as part of its analysis. Recommended for
        // projects consisting of an app with library dependencies.
        checkDependencies true
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs += [
                    '-Xopt-in=kotlin.ExperimentalUnsignedTypes',
                    '-Xopt-in=com.juul.kable.ObsoleteKableApi',
                    '-Xjvm-default=compatibility'
            ]
        }
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.9.0")
    implementation("androidx.appcompat:appcompat:$appcompat_version")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_runtime_ktx_version")
    implementation("com.juul.kable:core:$kable_core_version")
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_service_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.6.10")
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.2.0")
    androidTestImplementation("androidx.test.ext:junit:$junit_version")
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_core_version")
    testImplementation('junit:junit:4.13.2')
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = "inc.combustion"
                artifactId = "framework"
                version = "0.1.0"
            }
            // Creates a Maven publication called "debug".
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                // You can then customize attributes of the publication as shown below.
                groupId = "inc.combustion"
                artifactId = "framework"
                version = "0.1.0"
            }
        }
    }
}
