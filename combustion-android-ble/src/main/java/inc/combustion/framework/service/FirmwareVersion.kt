/*
 * Project: Combustion Inc. Android Framework
 * File: FirmwareVersion.kt
 * Author:
 *
 * MIT License
 *
 * Copyright (c) 2023. Combustion Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package inc.combustion.framework.service

data class FirmwareVersion(
    val major: Int,
    val minor: Int,
    val patch: Int,
    val commit: Int?,
    val sha: String? = null
) : Comparable<FirmwareVersion> {
    override fun compareTo(other: FirmwareVersion): Int {
        if (major > other.major) return 1
        if (major < other.major) return -1

        if (minor > other.minor) return 1
        if (minor < other.minor) return -1

        if (patch > other.patch) return 1
        if (patch < other.patch) return -1

        if(commit == null && other.commit == null) return 0
        if(other.commit == null) return 1
        if(commit == null) return -1

        if(commit > other.commit) return 1
        if(commit < other.commit) return -1

        return 0
    }

    /**
     * Converts this to a version string of the format `vMAJOR.MINOR.PATCH[-COMMIT_NUMBER-GIT_SHA]`.
     */
    override fun toString(): String {
        val c = commit?.let { "-$it" } ?: ""
        val sha = sha?.let { "-$it" } ?: ""
        return "v$major.$minor.$patch$c$sha"
    }

    companion object {
        /**
         * Signifies an invalid or unset firmware version. It's always out of date, the git SHA
         * can't be generated by the build system, and [toString()] will make it clear to a reader
         * that it's not valid.
         */
        val INVALID = FirmwareVersion(0, 0, 0, 0, "invalidVersion")

        /**
         * Converts [versionString] of the format `vMAJOR.MINOR.PATCH[-COMMIT_NUMBER-GIT_SHA]` to a
         * [FirmwareVersion], throwing [IllegalArgumentException] when the format is incorrect or
         * when the version identifiers aren't valid decimal (base ten) numbers.
         */
        fun fromString(versionString: String): FirmwareVersion {
            if (!versionString.startsWith("v") || versionString.count { it == '.' } != 2) {
                throw IllegalArgumentException("Versions must start with 'v'")
            }

            val s = versionString.drop(1)

            val versionAndSha = s.split('-')

            val versionIds = versionAndSha[0].split('.')
            if (versionIds.size != 3) {
                throw IllegalArgumentException("Versions must be of the form major.minor.patch[-gitsha]")
            }

            val major = versionIds[0].toIntOrNull(10) ?:
            throw IllegalArgumentException("Major version must be an integer")
            val minor = versionIds[1].toIntOrNull(10) ?:
            throw IllegalArgumentException("Minor version must be an integer")
            val patch = versionIds[2].toIntOrNull(10) ?:
            throw IllegalArgumentException("Patch version must be an integer")
            val commit = if (versionAndSha.size == 3) versionAndSha[1].toIntOrNull() else null
            val sha = if (versionAndSha.size == 3) versionAndSha[2] else null

            return FirmwareVersion(major, minor, patch, commit, sha)
        }
    }
}